// SPDX-FileCopyrightText: 2023 Friedrich-Alexander-Universitat Erlangen-Nurnberg
//
// SPDX-License-Identifier: AGPL-3.0-only

// Exercise 3: The World Development Report 2022, CountryStats for an Equitable Recovery. 

// This Jayvee model describes a pipeline 
// from a CSV file in the web 
// to a SQLite file sink.
pipeline CountryStatsPipeline {

  CountryStatsExtractor
    -> CountryStatsXlsxInterpreter;

  // The output of the preceding block is hereby used 
  // as input for the succeeding block.

  CountryStatsXlsxInterpreter
    -> CountryStatsSheetPicker
    -> CountryStatsDataSelector
    -> BondIssuanceColumnSelector
    -> BondIssuanceTableInterpreter
    -> BondLoader;

  CountryStatsDataSelector
    -> GdpPerCapitaColumnSelector
    -> GdpPerCapitaTableInterpreter
    -> GdpLoader;


    block CountryStatsExtractor oftype HttpExtractor {

        // Here, we specify the URL where the file shall be downloaded from.
        url: "https://thedocs.worldbank.org/en/doc/7d852628d96b9411d43e5d36d5dff941-0050062022/original/Graphs-Chapter-5-02082022.xlsx";
    }

  // Next, we interpret the text file as sheet.
  // A sheet only contains text cells and is useful for manipulating the shape of data before assigning more strict value types to cells.
    block CountryStatsXlsxInterpreter oftype XLSXInterpreter { 

    }

    block CountryStatsSheetPicker oftype SheetPicker {
    sheetName: "Figure S5.1.2";
    }

    block CountryStatsDataSelector oftype CellRangeSelector {
    select: range P3:S45;
    }

    block BondIssuanceColumnSelector oftype ColumnDeleter {
    delete: [column B, column C];
    }

    block GdpPerCapitaColumnSelector oftype ColumnDeleter {
    delete: [column B, column D];
    }
    // As a next step, we interpret the sheet as a table by adding structure.
  // We define a value type per column that specifies the data type of the column.
  // Rows that include values that are not valid according to the their value types are dropped automatically. 
    block BondIssuanceTableInterpreter oftype TableInterpreter {
    header: false;
    columns: [
        "Country Code" oftype CountryCodeAlpha3,
        "Bond Issuance Share" oftype BondIssuanceShareType
    ];

    //  Rename header columns: “ISO3” to "Country Code", “GDP per capita (US$, thousands)” to "GDP per Capita", “Share of government sustainable bonds" 
    //  to "Bond Issuance Share"
    // “Economy” does not have to be renamed

    }
  

    block GdpPerCapitaTableInterpreter oftype TableInterpreter {
    header: false;
    columns: [
        "Country Code" oftype CountryCodeAlpha3,
        "GDP per Capita" oftype GdpPerCapitaType,
    ];

    }


    valuetype GdpPerCapitaType oftype decimal {
        constraints: [ GdpPerCapitaConstraint ];
        
        }

    // Define regex constraint with required regex pattern to extract text from  stadtteil starting with Vogelsang 
    constraint GdpPerCapitaConstraint on decimal:
        value >= 0;
        
    valuetype BondIssuanceShareType oftype decimal {
        constraints: [ BondIssuanceShareConstraint ];
        
        }

  // Define regex constraint with required regex pattern to extract text from  stadtteil starting with Vogelsang 
    constraint BondIssuanceShareConstraint oftype RangeConstraint {
        lowerBound: 0;
        lowerBoundInclusive: true;
        upperBound: 1;
        upperBoundInclusive: true;
}



//  block ISO3ToCountrCodeTransformer oftype TableTransformer {
//    inputColumns: "ISO3";
//    outputColumn: 'Country Code';
//    uses: ISO3ToCountryCode;
//  }

//  transform ISO3ToCountryCode {   
//     from ISO3 oftype CountryCodeAlpha3;
//    to "Country Code" oftype CountryCodeAlpha3;
//    "Country Code": ISO3 
//  }
 


  // Now, we load the table into a sink,
  // here into a sqlite file.
  // The structural information of the table is used
  // to generate the correct table.

  block BondLoader oftype SQLiteLoader {
    table: "bondIssuance";
    file: "./country-stats.sqlite";
  }
  block GdpLoader oftype SQLiteLoader {
    table: "gdpPerCapita";
    file: "./country-stats.sqlite";
  }


  // Define permitive type for id and stadtteil on text with regex constraints
//   valuetype GeoCoordinates oftype text {
//     constraints: [ GeoCoordinatesRegex ];
//     }
    
//   valuetype StadtVogelsang oftype text {
//     constraints: [ StartsWithVogelsang ];
    
//     }

//   // Define regex constraint with required regex pattern to extract text from  stadtteil starting with Vogelsang 
//   constraint StartsWithVogelsang oftype RegexConstraint {
//     regex: /^Vogelsang/;
//   }

//   // Define regex constraint with required regex pattern to extract geo coordinates from  id with format: {geo-coordinate 1}, {geo-coordinate 2}
//   //a geo-coordinate is defined as {1-3 numbers}.{numbers}
 
//   constraint GeoCoordinatesRegex oftype RegexConstraint {
//     regex: /^\d{1,3}\.\d+,\s?\d{1,3}\.\d+$/;
//   }

}