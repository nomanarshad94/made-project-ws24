// SPDX-FileCopyrightText: 2023 Friedrich-Alexander-Universitat Erlangen-Nurnberg
//
// SPDX-License-Identifier: AGPL-3.0-only

// Exercise 3: The World Development Report 2022, CountryStats for an Equitable Recovery. 

// This Jayvee model describes a pipeline 
// from a xlsx file in the web 
// to a SQLite file sink.
pipeline CountryStatsPipeline {

  CountryStatsExtractor
    -> CountryStatsXlsxInterpreter;

  // The output of the preceding block is hereby used 
  // as input for the succeeding block.

  CountryStatsXlsxInterpreter
    -> CountryStatsSheetPicker
    -> CountryStatsDataSelector
    -> BondIssuanceColumnSelector
    -> BondIssuanceTableInterpreter
    -> BondLoader;

  // Separate pipeline for GDP per Capita table
  CountryStatsDataSelector
    -> GdpPerCapitaColumnSelector
    -> GdpPerCapitaTableInterpreter
    -> GdpLoader;


    block CountryStatsExtractor oftype HttpExtractor {

        // Here, we specify the URL where the file shall be downloaded from.
        url: "https://thedocs.worldbank.org/en/doc/7d852628d96b9411d43e5d36d5dff941-0050062022/original/Graphs-Chapter-5-02082022.xlsx";
    }

  // Next, we interpret the xlsx file as sheet.
  // A sheet only contains text cells and is useful for manipulating the shape of data before assigning more strict value types to cells.
    block CountryStatsXlsxInterpreter oftype XLSXInterpreter { 

    }
    // Selected required sheet from xlsx file
    block CountryStatsSheetPicker oftype SheetPicker {
    sheetName: "Figure S5.1.2";
    }

    // selected data by ignoring figure also excluded header row as header assinged in table interpreter block
    block CountryStatsDataSelector oftype CellRangeSelector {
    select: range P3:S45;
    }

    // deleting irrelevant tables using column IDs
    block BondIssuanceColumnSelector oftype ColumnDeleter {
    delete: [column B, column C];
    }

    block GdpPerCapitaColumnSelector oftype ColumnDeleter {
    delete: [column B, column D];
    }
    // As a next step, we interpret the sheet as a table by adding structure.
  // We define a value type per column that specifies the data type of the column.
  // Rows that include values that are not valid according to the their value types are dropped automatically. 
    block BondIssuanceTableInterpreter oftype TableInterpreter {
    header: false;
    columns: [
        "Country Code" oftype CountryCodeAlpha3,
        "Bond Issuance Share" oftype BondIssuanceShareType
        ];

    }
  

    block GdpPerCapitaTableInterpreter oftype TableInterpreter {
    header: false;
    columns: [
        "Country Code" oftype CountryCodeAlpha3,
        "GDP per Capita" oftype GdpPerCapitaType,
        ];

    }

    // Setting up value constraints for data validation
    valuetype GdpPerCapitaType oftype decimal {
        constraints: [ GdpPerCapitaConstraint ];
        
    }

    // Define constraint expression for positive decimals only
    constraint GdpPerCapitaConstraint on decimal:
        value >= 0;
        
    
    valuetype BondIssuanceShareType oftype decimal {
        constraints: [ BondIssuanceShareConstraint ];
        
    }

    // Define constraint block for values 0-1 (inclusive)
    constraint BondIssuanceShareConstraint oftype RangeConstraint {
        lowerBound: 0;
        lowerBoundInclusive: true;
        upperBound: 1;
        upperBoundInclusive: true;
    }


    // Now, we load the table into a sink,
    // here into a sqlite file.
    // The structural information of the table is used
    // to generate the correct table.

    block BondLoader oftype SQLiteLoader {
    table: "bondIssuance";
    file: "./country-stats.sqlite";
    }
    block GdpLoader oftype SQLiteLoader {
    table: "gdpPerCapita";
    file: "./country-stats.sqlite";
    }

}